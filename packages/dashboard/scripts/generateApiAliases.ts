import fs from "fs";
import path from "path";
import { bootstrapEnv } from "@zeffuro/fakegaming-common";

const { __dirname } = bootstrapEnv(import.meta.url);

const openApiFile = path.resolve(__dirname, "../../api/openapi.json");
const outputFile = path.resolve(__dirname, "../types/apiResponses.ts");
const apiTypesImportPath = "@/types/api";

// Read OpenAPI JSON
const openApi = JSON.parse(fs.readFileSync(openApiFile, "utf8"));

const aliasLines: string[] = [
    `import type { paths } from "${apiTypesImportPath}";`,
    "",
    "// ----- Autogenerated endpoint type aliases -----",
    "",
];

for (const [route, verbs] of Object.entries(openApi.paths)) {
    for (const [method, details] of Object.entries(verbs as Record<string, any>)) {
        // Response types
        if (details.responses) {
            for (const [status, resp] of Object.entries(details.responses)) {
                // Type guard for resp
                if (
                    typeof resp === "object" &&
                    resp !== null &&
                    "content" in resp &&
                    (resp as any).content &&
                    (resp as any).content["application/json"]
                ) {
                    aliasLines.push(
                        `/**`,
                        ` * Response for [${method.toUpperCase()} ${route} ${status}]`,
                        ` *`,
                        ` * @see paths["${route}"]["${method}"]["responses"]["${status}"]["content"]["application/json"]`,
                        ` */`
                    );
                    const aliasName =
                        route.replace(/[\\/{}]/g, "_")
                            .replace(/_{2,}/g, "_")
                            .replace(/^_+|_+$/g, "")
                            .replace(/[^A-Za-z0-9_]/g, "") +
                        `_${method}_Response${status}`;
                    aliasLines.push(
                        `export type ${aliasName} = paths["${route}"]["${method}"]["responses"]["${status}"]["content"]["application/json"];`,
                        ""
                    );
                }
            }
        }

        // Request body types
        if (
            details.requestBody &&
            details.requestBody.content &&
            details.requestBody.content["application/json"]
        ) {
            aliasLines.push(
                `/**`,
                ` * Request body for [${method.toUpperCase()} ${route}]`,
                ` *`,
                ` * @see paths["${route}"]["${method}"]["requestBody"]["content"]["application/json"]`,
                ` */`
            );
            const aliasName =
                route.replace(/[\\/{}]/g, "_")
                    .replace(/_{2,}/g, "_")
                    .replace(/^_+|_+$/g, "")
                    .replace(/[^A-Za-z0-9_]/g, "") +
                `_${method}_Request`;
            aliasLines.push(
                `export type ${aliasName} = paths["${route}"]["${method}"]["requestBody"]["content"]["application/json"];`,
                ""
            );
        }
    }
}

fs.writeFileSync(outputFile, aliasLines.join("\n"));
console.log(`[generateApiAliases] Generated endpoint type aliases in ${outputFile}`);