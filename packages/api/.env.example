# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
PORT=3001
# Dashboard origin for CORS (preferred). Falls back to PUBLIC_URL if not set.
DASHBOARD_URL=http://localhost:3000
# Public URL of this API (used in docs and links). Do NOT include /api here.
PUBLIC_URL=http://localhost:3001

# =============================================================================
# LOGGING (pino)
# =============================================================================
# Set log level: fatal|error|warn|info|debug|trace (defaults: production=info, development=debug)
# LOG_LEVEL=debug
# Enable pretty logs (colors) when set to 1. In dev, set this to see colored output.
# LOG_PRETTY=1
# Optional: choose pretty mode: 'short' (single-line) or 'expanded' (multi-line). Defaults to 'short'.
# LOG_PRETTY_MODE=expanded

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# For local development: Use SQLite (no DATABASE_URL needed)
# For production/Docker: Use PostgreSQL with DATABASE_URL
DATABASE_PROVIDER=sqlite
# DATABASE_URL=postgres://user:password@host:5432/database

# =============================================================================
# JOBS (optional)
# =============================================================================
# Enable background jobs (disabled by default). Set to 1 to enable.
# In local dev without Postgres, set JOBS_BACKEND=memory.
# In production (or with Postgres), leave JOBS_BACKEND unset and ensure DATABASE_PROVIDER=postgres and DATABASE_URL is set.
# Examples (Windows cmd):
#   set JOBS_ENABLED=1; set JOBS_BACKEND=memory; pnpm --filter @zeffuro/fakegaming-bot-api run start:dev
#   set JOBS_ENABLED=1; set DATABASE_PROVIDER=postgres; set DATABASE_URL=postgres://user:pass@localhost:5432/fakegaming; pnpm --filter @zeffuro/fakegaming-bot-api run start:dev
# Default: disabled
# JOBS_ENABLED=0
# JOBS_BACKEND=memory

# =============================================================================
# DISCORD OAUTH (for /api/auth/login)
# =============================================================================
# The API exchanges a Discord OAuth code for an access token and issues a JWT.
# Get credentials from https://discord.com/developers/applications
DISCORD_CLIENT_ID=xxxxxxxxxxxxxxxxxxxx
DISCORD_CLIENT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# Where Discord should redirect back to; for API-based login, set to your Dashboard callback
# which will then call the API as needed. Keep in sync with the Dashboard's env.
DISCORD_REDIRECT_URI=http://localhost:3000/api/auth/discord/callback

# =============================================================================
# DISCORD BOT TOKEN (for API Discord REST helpers)
# =============================================================================
# Required for API endpoints that call Discord directly (e.g., member search,
# resolving users, sending messages). Obtain from your Discord application bot.
DISCORD_BOT_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# DASHBOARD ADMINS
# =============================================================================
# Comma-separated list of Discord user IDs with admin access
DASHBOARD_ADMINS=123456789012345678,987654321098765432

# =============================================================================
# JWT & AUTHENTICATION
# =============================================================================
# Generate a secure secret: openssl rand -base64 32
JWT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
JWT_AUDIENCE=fakegaming-dashboard
JWT_ISSUER=fakegaming

# =============================================================================
# SERVICE-TO-SERVICE AUTH (BOT -> API)
# =============================================================================
# Shared secret used for internal calls from the bot (and other trusted services).
# The bot sends it as HTTP header: X-Service-Token: <value>
# The API accepts SERVICE_API_TOKEN (preferred) or INTERNAL_API_TOKEN/API_SERVICE_TOKEN for compatibility.
SERVICE_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# REDIS (OPTIONAL)
# =============================================================================
# For session/cache storage. Free tiers available at:
# - Redis.com: https://redis.com/try-free/
# - Upstash: https://upstash.com/
# If not set, falls back to database storage
# REDIS_URL=redis://default:password@redis-host:6379

# =============================================================================
# RATE LIMITING (requests per minute)
# =============================================================================
API_MEMBER_SEARCH_TTL_MS=60000

# =============================================================================
# TWITCH INTEGRATION
# =============================================================================
# Get credentials from https://dev.twitch.tv/console/apps
TWITCH_CLIENT_ID=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TWITCH_CLIENT_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# Optional: jitter (ms) to stagger startup and avoid thundering herd
TWITCH_STARTUP_JITTER_MS=8000
# Optional: encrypt app token at rest in DB (AES-256-GCM). Provide a stable secret.
# A SHA-256 of this value is used as the 32-byte encryption key.
TWITCH_TOKEN_ENC_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# YOUTUBE INTEGRATION
# =============================================================================
# Get API key from https://console.cloud.google.com/apis/credentials
YOUTUBE_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# Optional: disabled by default to reduce token usage
YOUTUBE_ENRICH_EMBEDS=0

# =============================================================================
# TIKTOK INTEGRATION
# =============================================================================
# Get cookies from a logged-in TikTok web session
TIKTOK_COOKIE=msToken=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
